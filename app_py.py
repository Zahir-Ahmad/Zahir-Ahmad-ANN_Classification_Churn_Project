# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17nQpRFmal7CX9sBb8vsilAUjZIyq86UI
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import pandas as pd
# import streamlit as st
# import pickle
# from tensorflow.keras.models import load_model
# 
# model = load_model('/content/drive/MyDrive/ANN_Project/ANN_P1/model.h5')
# 
# with open('/content/drive/MyDrive/ANN_Project/ANN_P1/label_encoder_gender.pkl', 'rb') as file:
#     label_encoder_gender = pickle.load(file)
# 
# with open('/content/drive/MyDrive/ANN_Project/ANN_P1/one_hot_encoder.pkl', 'rb') as file:
#     one_hot_encoder_geo = pickle.load(file)
# 
# with open('/content/drive/MyDrive/ANN_Project/ANN_P1/scaler.pkl', 'rb') as file:
#     scaler = pickle.load(file)
# 
# st.title("Bank Customer Churn Prediction")
# 
# credit_score = st.number_input("Credit Score", min_value=300, max_value=900, value=600)
# geography = st.selectbox("Geography", ['France', 'Germany', 'Spain'])
# gender = st.selectbox("Gender", ['Male', 'Female'])
# age = st.slider("Age", 18, 100, 40)
# tenure = st.slider("Tenure", 0, 10, 3)
# balance = st.number_input("Balance", value=60000.0)
# num_products = st.selectbox("Number of Products", [1, 2, 3, 4])
# has_cr_card = st.selectbox("Has Credit Card?", [0, 1])
# is_active_member = st.selectbox("Is Active Member?", [0, 1])
# estimated_salary = st.number_input("Estimated Salary", value=50000.0)
# 
# if st.button("Predict"):
#     input_df = pd.DataFrame([{
#         'CreditScore': credit_score,
#         'Geography': geography,
#         'Gender': gender,
#         'Age': age,
#         'Tenure': tenure,
#         'Balance': balance,
#         'NumOfProducts': num_products,
#         'HasCrCard': has_cr_card,
#         'IsActiveMember': is_active_member,
#         'EstimatedSalary': estimated_salary
#     }])
# 
#     input_df['Gender'] = label_encoder_gender.transform(input_df['Gender'])
#     geo_encoded = one_hot_encoder_geo.transform(input_df[['Geography']]).toarray()
#     geo_encoded_df = pd.DataFrame(geo_encoded, columns=one_hot_encoder_geo.get_feature_names_out(['Geography']))
#     input_df = input_df.drop('Geography', axis=1)
#     input_df = pd.concat([input_df, geo_encoded_df], axis=1)
#     input_scaled = scaler.transform(input_df)
# 
#     prediction = model.predict(input_scaled)
#     prob = prediction[0][0]
# 
#     st.subheader("Prediction Result")
#     st.write(f"Churn Probability: {prob:.2f}")
#     if prob > 0.5:
#         st.error("Customer is likely to churn.")
#     else:
#         st.success("Customer is likely to stay.")
#

from pyngrok import ngrok
import time

# Set your ngrok authtoken
ngrok.set_auth_token("2ygJmfo7hJMJy790WoDiWStHdfO_3AjuafbUTmbMhNQ9VFzkM")

# Kill previous streamlit processes (if any)
!pkill streamlit

# Launch the Streamlit app in background
!streamlit run app.py &>/dev/null &

# Give it a few seconds to start
time.sleep(5)

# Create a public URL using ngrok
public_url = ngrok.connect("http://localhost:8501")
print("âœ… Streamlit app is live at:", public_url)

from google.colab import drive
drive.mount('/content/drive')

# !ls /content/drive/MyDrive/ANN_Project/ANN_P1/

# !wget -q -O - ipv4.icanhazip.com
# #

# !streamlit run app.py & npx localtunnel --port 8501

